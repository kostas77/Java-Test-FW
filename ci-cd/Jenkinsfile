pipeline {

    agent any

    environment {
        build_stamp = new Date().format("yyyyMMdd-HHmmss")
        ci_env = "${BRANCH_NAME}"
//        region = "eu-west-1"
        // GH_TOKEN = credentials('lhci-github-token')
//        ARTIFACTORY_URL          = 'docker-ecom-ecomplatform-local.bts.artifactory.tio.systems'
//        PIPELINE_ID              = getPipelineID()
//        COMPOSE_DOCKER_CLI_BUILD = 1
//        DOCKER_BUILDKIT          = 1
        // DOCKER_CREDENTIALS = 'docker-hub-credentials'
        // DOCKER_IMAGE = 'myusername/myimage'
        LIGHTHOUSE_IMAGE = 'patrickhulce/lhci-client:latest'
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 100, unit: 'MINUTES')
        timestamps()
//        ansiColor('xterm')
    }

    tools {
        nodejs 'NodeJS_16'
        dockerTool 'docker'
    }

    stages {

//        stage('Docker setup') {
//            steps {
//                script {
//                    echo 'Docker setup...'
////                    docker.login()
//                }
//            }
//        }

//        stage('SonarQube scan') {
//            steps {
//                script {
//                    try {
//                        if (env.BRANCH_NAME in ["main"]) {
//                            echo 'Start SonarQube Scanning...'
//                            def scannerHome = tool 'sonarQube-scanner';
//                            withSonarQubeEnv('sonarQube-regional-server') {// If you have configured more than one global server connection, you can specify its name
////                             sh "${env.SONAR_HOST_URL}"
////                             sh "echo env"
//                            sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=./sonar-project.properties"
////                             sh "${scannerHome}/bin/sonar-scanner"
//                            }
//                        } else {
//                            echo "No Sonarqube Scans required ${env.BRANCH_NAME}, skipping."
//                        }
//                    } catch (err) {
//                        echo err.getMessage()
//                    }
//                }
//            }
//        }

        stage('Setup Google Chrome') {
            steps {
                script {
                    sh 'sudo yum install -y liberation-fonts'
                    sh '''
                        wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
                        sudo yum localinstall -y ./google-chrome-stable_current_x86_64.rpm
                    '''
                }
            }
        }

        stage('Lighthouse CI scan') {
            steps {
                script {
                    try {
                        script {
                            sh 'npm install -g @lhci/cli@0.12.x'
                            sh 'lhci autorun --config=lighthouserc.js'
                            // sh 'LHCI_GITHUB_APP_TOKEN=$GH_TOKEN lhci autorun'
                        }
                    } catch (err) {
                        echo err.getMessage()
                    }
                }
            }
        }

//        stage('Test') {
//            steps {
//                script {
//                    echo 'Testing...'
//                    sh 'echo $PATH'
//                    // docker.build([service])
//
//                    // docker.test(
//                    //     [(service): [test_command: 'yarn resolve-secrets:local && yarn build && xvfb-run --auto-servernum yarn workspace e2e run:smoke-tests']]
//                    // )
//                }
//            }
//        }

//        stage('Docker Lighthouse CI') {
//            steps {
//                // Check Docker version
//                sh 'docker --version'
//
//                // Pull the Lighthouse CI Docker image
//                script {
//                    docker.image(LIGHTHOUSE_IMAGE).pull()
//                }
//
//                // Run Lighthouse CI using Docker
//                script {
//                    def lighthouseContainer = docker.image(LIGHTHOUSE_IMAGE).run("--entrypoint=''")
//                    lighthouseContainer.inside {
//                        sh """
//                            lhci autorun
//                        """
//                    }
//                }
//
//                // Optional: Store the results or perform further actions
//                // e.g., upload results to Lighthouse CI server or display in Jenkins
//            }
//        }

    }

    post {
        always {
            sh("git clean -dfx")
        }
    }

}
